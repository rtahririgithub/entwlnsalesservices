<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="fdac0bb6-da83-4cfe-b423-0a5430e32d24" activeEnvironment="Default" name="Wireline_GWP_REST_MOCK" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="2916e2ae-ebd3-4109-ad90-6b5925adaa8f" wadlVersion="http://wadl.dev.java.net/2009/02" name="EnterpriseSalesService" type="rest" basePath="/v1/mso/channelsalesmgmt/enterprise-sales-service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>This service provides the interface for creation, updates, submission of sales related resources</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://142.63.224.221:7001/MSO_REST_EWLNSS</con:endpoint><con:endpoint>http://localhost:7001</con:endpoint><con:endpoint>http://localhost:7001/MSO_REST_EWLNSS</con:endpoint><con:endpoint>http://localhost:8080</con:endpoint><con:endpoint>http://virtserver.swaggerhub.com</con:endpoint><con:endpoint>https://virtserver.swaggerhub.com</con:endpoint></con:endpoints><con:resource name="/sales" path="/sales" id="c770f0db-02c4-456e-9101-134f2849b9cb"><con:settings/><con:parameters/><con:method name="POST" id="e5d258d3-59e1-4d00-92eb-f488e54a2d38" method="POST"><con:description>
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sal="http://localhost/ESS/1.0.0/sales">sal:Fault</con:element></con:representation><con:request name="Request 1" id="8f8736b4-f763-4020-ad1c-5f4a294b09b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://142.63.224.221:7001/MSO_REST_EWLNSS</con:endpoint><con:request>{
  "operationHeader": {
    "salesTransactionId":"2"
  },
  "sales": {
    "salesHeader": {
      "applicationProfile": {
        "originatorApplicationId": "9919"
      },
      "userProfile": {
        "channelOrgInternalId": "10122163",
        "loginId": "bob148dsa",
        "channelOrgTypeCode": "DL",
        "outletAssociatedProvinces": [
          "ON",
          "PQ"
        ],
        "channelOrgNumber": "04517",
        "salesRepId": 5335
      }
    },
    "serviceAddress": {
      "serviceAddressId": "000020750",
      "provinceCode": "AB",
      "cityCode": "AIRDRIE"
    },
    "billingAccount": {
      "accountSubType": "R",
      "billingAccountNumber": "603172003",
      "accountType": "I"
    },
    "customer": {
      "customerId": "120382564"
    }
  }
}</con:request><con:originalUri>http://localhost/ESS/1.0.0/sales</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/sales/{salesId}/salesItem" path="/sales/{salesId}/salesItem" id="cd323f64-836c-40d6-a4ad-589133de0395"><con:settings/><con:parameters><con:parameter required="true"><con:name>salesId</con:name><con:value>ES101</con:value><con:style>TEMPLATE</con:style><con:default>ES101</con:default><con:description>Sales Id of the associated sales.</con:description></con:parameter></con:parameters><con:method name="POST" id="155b763b-8397-494a-85c6-e0656f52b49c" method="POST"><con:description>
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sal="http://localhost/ESS/1.0.0/sales/ES103/salesItem">sal:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="b512374b-55f6-4131-bc39-5fbf01ddb951" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://142.63.224.221:7001/MSO_REST_EWLNSS</con:endpoint><con:request>{  
   "operationHeader":{  
      "salesTransactionId":"6"
   }
}
</con:request><con:originalUri>http://localhost/ESS/1.0.0/sales/ES103/salesItem</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="salesId" value="ES_006" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>salesId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="d9b3132d-f32d-42b6-a2c0-0d1fc73504dc" port="8080" path="/" host="L034805" name="REST MockService 1"><con:settings/><con:properties/><con:restMockAction name="/ESS/1.0.0/sales" method="POST" resourcePath="/v1/mso/channelsalesmgmt/enterprise-sales-service/sales" id="06a11188-7a71-455e-b456-95d6ed9406e3"><con:settings/><con:defaultResponse>99_system_error</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[

def requestPath = mockRequest.getPath()
log.info("Sales  ----> ")
log.info "Path: "+ requestPath

import java.text.SimpleDateFormat
def date = new Date()
//2018-06-20T11:30:13-0400
sdf = new SimpleDateFormat("yyyy-MM-dd")
sdf2  = new SimpleDateFormat("HH:mm:ss-0400")
def currentDate = sdf.format(date)
def currentTime = sdf2.format(date) 

requestContext.currnetDateTime = currentDate + "T" + currentTime
requestContext.locale = "en_CA"

log.info(requestPath)

def invalidSalesId = ""

def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody
def String salesTransactionId = new groovy.json.JsonSlurper().parseText(requestBody).operationHeader.salesTransactionId;

log.info(salesTransactionId)
if (requestPath != null){
	String[] fields = requestPath.split('/')

	salesId = ""
	isSalesItem = false
	
	fields.each{ 
		if (it != "ESS" && it != "1.0.0" && it != "salesItem"){
			salesId = it
		}

		if (it.equalsIgnoreCase("salesitem")){
			isSalesItem = true
		}
	}
}

if (isSalesItem){
	log.info("salesId = " + salesId)

	requestContext.salesId = salesId
	requestContext.salesTransactionId = salesTransactionId
	
	if (salesId == "ES_003") {
		return "item_ES_003a"
	}
	
//	if (salesId == "ES_004") {
//		return "item_ES_004a"
//	}

	if (salesId == "ES_005" || salesId == "ES_201806271112") {
		return "item_ES_005a"
	}

	if (salesId == "ES_006") {
		return "item_ES_006a_offer_not_valid"
	}

	
	
	if (salesId != "ES_005" && salesId != "ES_003" && salesId != "ES_006" && salesId != "ES_201806271112"){
		requestContext.invalidSalesId = salesId
		requestContext.allow_sales_ids = "[ ES_003, ES_004, ES_005, ES_006, ES_201806271112 ]"
		return "3_invalid_sales_id"
	}
}

/**********************************************************/



 

log.info "salesTransactionId is : ${salesTransactionId}" 

if (salesTransactionId == "1"){
	return '1a_ok'
} else {
	return '2a_error'
}


]]></con:dispatchPath><con:response name="1_ok" id="84e6701a-48a1-4cf2-a6ed-a81ac7877acf" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"salesValidIndicator": true,
 	"salesId": "ES_201806271112",
	 "status": {
   		"statusTxt": "OK- Success",
   		"systemErrorTimestamp": "2018-06-20T11:30:13-0400",
   		"statusCd": "200"
	 }
}
</con:responseContent></con:response><con:response name="2_error" id="46c6400e-cd41-48a9-83a1-059bb4bc70ef" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
   "hasError": "true",
   "status":    {
      "statusTxt": "Failed to create sales",
      "systemErrorTimestamp": "2018-06-20T11:30:13-0400",
      "statusCd": "400"
   },
   "salesValidIndicator": false,
   "responseMessages": [   {
      "errorCode": "10138035",
      "messageType": " ERROR ",
      "messages": [      {
         "locale": " en_CA",
         "message": "Mock service : Failed to create Sales"
      }]
   }]
}</con:responseContent></con:response><con:response name="3_invalid_sales_id" id="ce97f076-428b-4895-ba90-47e47baba132" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "${salesTransactionId}",
    "salesId": "${salesId}",
    "salesOrderId": "1" 
  },
  "hasError": "TRUE",
  "status": {
    "statusCd": "400",
    "statusTxt": "Fail to process salesItem - Mocking",
    "systemTimestamp": "${currnetDateTime}"
  },
  "salesValidIndicator": true,
  "responseMessages": [
    {
      "errorCode": "10138036",
      "messageType": "ERROR",
      "messages": [
        {
          "message":"Mock service : invalid sales Id ${invalidSalesId}",
          "locale": "${locale}"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "${salesTransactionId}",
        "salesId": "${salesId}",
        "salesOrderId": "1" 
      },
      "validationContextType": "type1",
      "validationContextSubType": "subtype1"
    }
  ]
}</con:responseContent></con:response><con:response name="item_ES_003" id="71cf6ee9-c809-49b9-9f16-d0d269f01be1" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{  
   "hasError":"true",
   "status":{  
      "statusTxt":"Failed",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"400"
   },
   "salesValidIndicator":false,
   "responseMessages":[  
      {  
         "errorCode":"10138035",
         "messageType":" ERROR ",
         "messages":[  
            {  
               "locale":" en_CA",
               "message":"Mock service failure Scenario #3"
            }
         ],
         "salesIdentifier":{  
            "salesId":"ES_201806271112",
            "salesOrderId":"ES201806",
            "salesItemId":"ESITEM_201806271112"
         } 
      }
   ]
}</con:responseContent></con:response><con:response name="item_ES_004" id="9489c257-4f55-4abc-b37d-b06dbbeeaabe" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{  
   "hasError":"true",
   "status":{  
      "statusTxt":"Failed: invalid sales Id",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"400"
   },
   "salesValidIndicator":false,
   "responseMessages":[  
      {  
         "errorCode":"10138035",
         "messageType":" ERROR ",
         "messages":[  
            {  
               "locale":" en_CA",
               "message":"Mock service : invalid sales Id scenario #4"
            }
         ]
      }
   ]
}</con:responseContent></con:response><con:response name="item_ES_005" id="4fd9314a-f205-4741-9639-cbe86e26bc49" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "salesValidIndicator":true,
   "salesItemId":"ES_201806271112",
   "status":{  
      "statusTxt":"OK-Success",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"200"
   }
}</con:responseContent></con:response><con:response name="item_ES_006" id="800c74ea-98b5-4b96-870d-18acf98c4793" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{  
   "hasError":"true",
   "status":{  
      "statusTxt":"failed: no gift found",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"400"
   },
   "salesValidIndicator":false,
   "responseMessages":[  
      {  
         "errorCode":"10138035",
         "messageType":" ERROR ",
         "messages":[  
            {  
               "message":" en_CA",
               "locale":"Mock service : No Gift Offer Found"
            }
         ],
         "salesIdentifier":{  
            "salesId":"ES_201806271112",
            "salesOrderId":"ES201806",
            "salesItemId":"ESITEM_201806271112"
         },
         "validationContextType":"OFFER",
         "validationContextSubType":"GWP"
      }
   ]
}</con:responseContent></con:response><con:response name="1a_ok" id="080e8a6c-b6a2-4c0a-a030-2f3b2eb95740" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "1",
    "salesId": "ES_201806271112" 
  },
  "status": {
    "statusCd": "200",
    "statusTxt": "OK- Success",
    "systemTimestamp": "${currnetDateTime}"
  },
  "salesValidIndicator": true,
  "responseMessages": [
    {
      "errorCode": "OK",
      "messageType": "INFO",
      "messages": [
        {
          "message": "Success",
          "locale": "${locale}"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "1",
        "salesId": "ES_201806271112" 
      } 
    }
  ]
}</con:responseContent></con:response><con:response name="2a_error" id="03a66740-7541-4c17-98c9-02fdf4480e5f" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "2"
  },
  "hasError":"TRUE",
  "status": {
    "statusCd": "400",
    "statusTxt": "FAILED - Fail to Create Sales ID, reason MOCK",
    "systemTimestamp": "${currnetDateTime}"
  },
  "salesValidIndicator": true,
  "responseMessages": [
    {
      "errorCode": "ERR_12345",
      "messageType": "ERROR",
      "messages": [
        {
          "message": "Fail to create Sales ID, reason - MOCK",
          "locale": "${locale}"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "2" 
      } 
    }
  ]
}</con:responseContent></con:response><con:response name="item_ES_005a" id="39058f50-d865-406c-ad4b-033d79ef7195" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "${salesTransactionId}",
    "salesId": "${salesId}", 
    "salesItemId": "ESITEM_1"
  },
  "salesValidIndicator": true,
  "status": {
    "statusCd": "200",
    "statusTxt": "OK - Success",
    "systemTimestamp": "${currnetDateTime}"
  },
  "responseMessages": [
    { 
      "messageType": "INFO",
      "messages": [
        {
          "message": "transaction successful",
          "locale": "EN"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "${salesTransactionId}",
        "salesId": "${salesId}", 
        "salesItemId": "ESITEM_1"
      },
      "validationContextType": "Type1",
      "validationContextSubType": "SubType1"
    }
  ]
}</con:responseContent></con:response><con:response name="item_ES_003a" id="0a9c59af-0a1d-4f90-bad8-94abbc4a71d8" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "${salesTransactionId}",
    "salesId": "${salesId}", 
    "salesItemId": "ESITEM_1"
  },
  "hasError": "TRUE",
  "status": {
    "statusCd": "400",
    "statusTxt": "Fail to process salesItem - Mocking",
    "systemTimestamp": "${currnetDateTime}"
  },
  "salesValidIndicator": true,
  "responseMessages": [
    {
      "errorCode": "10138035",
      "messageType": "ERROR",
      "messages": [
        {
          "message": "Mock service - Exception Error Scenario #3",
          "locale": "${locale}"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "${salesTransactionId}",
        "salesId": "${salesId}", 
        "salesItemId": "ESITEM_1"
      },
      "validationContextType": "type1",
      "validationContextSubType": "subtype1"
    }
  ]
}</con:responseContent></con:response><con:response name="item_ES_004a" id="f9de9473-592b-422c-b4c6-97d0bcf85a7f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "${salesTransactionId}",
    "salesId": "${salesId}", 
    "salesItemId": "ESITEM_1"
  },
  "hasError": "TRUE",
  "status": {
    "statusCd": "400",
    "statusTxt": "Fail to process salesItem - Mocking",
    "systemTimestamp": "${currnetDateTime}"
  },
  "salesValidIndicator": true,
  "responseMessages": [
    {
      "errorCode": "10138035",
      "messageType": "ERROR",
      "messages": [
        {
          "message": "":"Mock service - Exception Error Scenario #3",
          "locale": "${locale}"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "${salesTransactionId}",
        "salesId": "${salesId}", 
        "salesItemId": "ESITEM_1"
      } 
    }
  ]
}</con:responseContent></con:response><con:response name="item_ES_006a_offer_not_valid" id="2e59cd5e-bda6-4703-bbcb-7c1f90bd8c51" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "salesIdentifier": {
    "salesTransactionId": "${salesTransactionId}",
    "salesId": "${salesId}", 
    "salesItemId": "ESITEM_1"
  },
  "hasError": "TRUE",
  "status": {
    "statusCd": "400",
    "statusTxt": "Fail to process salesItem - Mocking",
    "systemTimestamp": "${currnetDateTime}"
  },
  "salesValidIndicator": true,
  "responseMessages": [
    {
      "errorCode": "10138037",
      "messageType": "ERROR",
      "messages": [
        {
          "message": "":"Mock service : No Gift Offer Found",
          "locale": "${locale}"
        }
      ],
      "salesIdentifier": {
        "salesTransactionId": "${salesTransactionId}",
        "salesId": "${salesId}", 
        "salesItemId": "ESITEM_1"
      },
      "validationContextType": "OFFER",
      "validationContextSubType": "GWP"
    }
  ]
}</con:responseContent></con:response><con:response name="99_system_error" id="3b59c5ef-0405-4a8b-abf3-ebd564a4ffd9" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
	"ERROR":"SYSTEM FAILURE"
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="ES_005" method="POST" resourcePath="/v1/mso/channelsalesmgmt/enterprise-sales-service/sales/ES_005A/salesItem" id="34518a23-833e-42de-ace5-4d6f71ba1944"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/

def requestPath = mockRequest.getPath()
log.info("SalesItem ES_201806271112 ----> ")
log.info "Path: "+ requestPath


def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString
</con:dispatchPath><con:response name="Response 1" id="5e30ff39-1217-46c6-81de-c57a0d083a21" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "salesValidIndicator":true,
   "salesItemId":"ES_201806271112",
   "status":{  
      "statusTxt":"OK-Success",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"200"
   }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="ES_003" method="POST" resourcePath="/v1/mso/channelsalesmgmt/enterprise-sales-service/sales/ES_003A/salesItem" id="c12b7a2b-8e42-4312-9311-9a8dbbb101b9"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/

def requestPath = mockRequest.getPath()
log.info("SalesItem ES104 ----> ")
log.info "Path: "+ requestPath


def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString
</con:dispatchPath><con:response name="Response 1" id="7e6611a7-78e0-4059-9c7d-6db361b11fe3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "hasError":"true",
   "status":{  
      "statusTxt":"Failed",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"400"
   },
   "salesValidIndicator":false,
   "responseMessages":[  
      {  
         "errorCode":"10138035",
         "messageType":" ERROR ",
         "messages":[  
            {  
               "locale":" en_CA",
               "message":"Mock service failure Scenario #3"
            }
         ],
         "salesIdentifier":{  
            "salesId":"ES_201806271112",
            "salesOrderId":"ES201806",
            "salesItemId":"ESITEM_201806271112"
         } 
      }
   ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="ES_004" method="POST" resourcePath="/v1/mso/channelsalesmgmt/enterprise-sales-service/sales/ES_004A/salesItem" id="b249f5f6-4731-479d-8d2f-36f344902761"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/

def requestPath = mockRequest.getPath()
log.info("SalesItem {salesId}  ----> ")
log.info "Path: "+ requestPath


def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString
</con:dispatchPath><con:response name="Response 1" id="035241d4-07c1-4e1e-8eeb-fc6c2c7899f6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "hasError":"true",
   "status":{  
      "statusTxt":"Failed: invalid sales Id",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"400"
   },
   "salesValidIndicator":false,
   "responseMessages":[  
      {  
         "errorCode":"10138035",
         "messageType":" ERROR ",
         "messages":[  
            {  
               "locale":" en_CA",
               "message":"Mock service : invalid sales Id scenario #4"
            }
         ]
      }
   ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="ES_006" method="POST" resourcePath="/v1/mso/channelsalesmgmt/enterprise-sales-service/sales/ES_006A/salesItem" id="e0ba5c92-6bea-4dda-b2f4-9a8e06b91762"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="01ec13fd-4cc8-4060-93e6-bd707a8447c4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{  
   "hasError":"true",
   "status":{  
      "statusTxt":"failed: no gift found",
      "systemErrorTimestamp":"2018-06-20T11:30:13-0400",
      "statusCd":"400"
   },
   "salesValidIndicator":false,
   "responseMessages":[  
      {  
         "errorCode":"10138035",
         "messageType":" ERROR ",
         "messages":[  
            {  
               "message":" en_CA",
               "locale":"Mock service : No Gift Offer Found"
            }
         ],
         "salesIdentifier":{  
            "salesId":"ES_201806271112",
            "salesOrderId":"ES201806",
            "salesItemId":"ESITEM_201806271112"
         },
         "validationContextType":"OFFER",
         "validationContextSubType":"GWP"
      }
   ]
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>