package com.telus.csm.ewlnsis.soap.webservice;

import static org.springframework.beans.factory.config.BeanDefinition.SCOPE_PROTOTYPE;

import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.telus.csm.ewlnsc.aspect.MonitorPerformance;
import com.telus.csm.ewlnsc.aspect.ProfilingVariance;
import com.telus.csm.ewlnsc.soap.webservice.EnterpriseWLNExceptionUtil;
import com.telus.csm.ewlnsc.util.App;
import com.telus.csm.ewlnsc.util.EnterpriseWLNSalesServicesConstants;
import com.telus.csm.ewlnsc.util.EnterpriseWLNSalesServicesErrorCodes;
import com.telus.csm.ewlnsc.util.LoggerUtil;
import com.telus.csm.ewlnsis.core.utils.GetSalesOfferDetailMockBuilder;
import com.telus.csm.ewlnsis.soap.operation.GetAvailableInstallDateOperation;
import com.telus.csm.ewlnsis.soap.operation.GetAvailableOfferSummaryListOperation;
import com.telus.csm.ewlnsis.soap.operation.GetAvailableWirelineProductListOperation;
import com.telus.csm.ewlnsis.soap.operation.GetInstallationDetailOperation;
import com.telus.csm.ewlnsis.soap.operation.GetSalesOfferDetailOperation;
import com.telus.csm.ewlnsis.soap.operation.GetWirelineProductComponentListOperation;
import com.telus.csm.ewlnsis.ws.ServiceException;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableInstallDateResponseType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableInstallDateResponseType.AvailableInstallDatesList;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableInstallDateType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableOfferSummaryListResponseType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableOfferSummaryListType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableProductComponentResponseType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableProductComponentType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetInstallationDetailResponseType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetInstallationDetailType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetSalesOfferDetailResponseType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetSalesOfferDetailType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetWirelineProductComponentListResponseType;
import com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetWirelineProductComponentListType;
import com.telus.tmi.xmlschema.xsd.enterprise.basetypes.types.ping_v1.Ping;
import com.telus.tmi.xmlschema.xsd.enterprise.basetypes.types.ping_v1.PingResponse;
import com.telus.tmi.xmlschema.xsd.marketingsales.saleschannel.salescommontypes_v5.SalesResponseMessage;
import com.telus.tmi.xmlschema.xsd.marketingsales.saleschannel.salescommontypes_v5.SalesResponseMessage.MessageList;
/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6b21 
 * Generated source version: 2.1
 * 
 */
@Component
@Scope(SCOPE_PROTOTYPE)
@MonitorPerformance
public class EnterpriseSalesInformationServiceImpl {

	private static final Date startDate = new Date();
	
	private LoggerUtil logger = LoggerUtil.getLogger(EnterpriseSalesInformationServiceImpl.class);
	
	@Autowired
    private BeanFactory beanFactory;
	
	public GetAvailableInstallDateResponseType getAvailableInstallDate(GetAvailableInstallDateType parameters)
			throws ServiceException {
		String methodName = "getAvailableInstallDate";
		
    	String transId = parameters.getOperationHeader().getSalesTransactionId(); 
		if ("1".equals(transId)){
			return getStubForgetAvailableInstallDate();
		}else{
			
			logger.enter(methodName, parameters.toString());
			
			try {
				GetAvailableInstallDateOperation operation = new GetAvailableInstallDateOperation();
				return  operation.execute(parameters);
			} catch( Exception e ) { 
				logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, methodName, e.getMessage());
				logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, methodName, e.getMessage());
				if(!StringUtils.isBlank(parameters.getOperationHeader().getSalesTransactionId())){
					transId = parameters.getOperationHeader().getSalesTransactionId();
				}
				GetAvailableInstallDateResponseType result = new GetAvailableInstallDateResponseType();
				List<SalesResponseMessage.MessageList> messageList = new ArrayList<SalesResponseMessage.MessageList>();
				MessageList exceptionDetails = EnterpriseWLNExceptionUtil.getExceptionDetails(transId, e,EnterpriseWLNSalesServicesErrorCodes.GET_AVAIL_INSTALL_DATE_EXCEPTION_ERROR);
				messageList.add(exceptionDetails);
				result.setMessageList(messageList);
				return result;
			} finally{
				logger.exit(methodName);
			}
			 
		}
	}


	public PingResponse ping(Ping parameters) throws ServiceException {
		PingResponse response = new PingResponse();

		response.setVersion(App.getPingInfo(startDate)) ;

//		PostTaskHeartBeatOperation.sendHeartBeat("PostTask heartbeat ")
		return response;
	}
	
	private GetAvailableInstallDateResponseType getStubForgetAvailableInstallDate() {
		
		GetAvailableInstallDateResponseType result = new GetAvailableInstallDateResponseType();

		List<AvailableInstallDatesList> availableInstallDatesList = result.getAvailableInstallDatesList();

		AvailableInstallDatesList availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("SING");
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 1)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 2)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 3)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 4)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 5)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 6)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 7)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 8)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 9)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 10)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 11)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 12)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 13)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 14)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 15)).getTime());
		
		
		availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("HSIC");
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 16)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 17)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 18)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 19)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 20)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 21)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 22)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 23)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 24)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 25)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 26)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 27)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 28)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 29)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 30)).getTime());
		
		
		availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("TTV");
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 1)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 2)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 3)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 4)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 5)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 6)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 7)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 8)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 9)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 10)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 11)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 12)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 13)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 14)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 15)).getTime());
		
		
		availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("TTV");
		availableInstallDates.getServiceTypeList().add("HSIC");

		
		availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("SING");
		availableInstallDates.getServiceTypeList().add("HSIC");

		
		availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("SING");
		availableInstallDates.getServiceTypeList().add("TTV");
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 16)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 17)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 18)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 19)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 20)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 21)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 22)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 23)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 24)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 25)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 26)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 27)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 28)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 29)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 9, 30)).getTime());

		
		availableInstallDates = new AvailableInstallDatesList();
		availableInstallDatesList.add(availableInstallDates);
		availableInstallDates.setInstallationRequiredInd(true);
		availableInstallDates.getServiceTypeList().add("SING");
		availableInstallDates.getServiceTypeList().add("TTV");
		availableInstallDates.getServiceTypeList().add("HSIC");		
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 1)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 2)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 3)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 4)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 5)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 6)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 7)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 8)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 9)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 10)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 11)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 12)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 13)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 14)).getTime());
		availableInstallDates.getDateList().add((new GregorianCalendar(2017, 10, 15)).getTime());

		
		return result;
	}


	public GetInstallationDetailResponseType getInstallationDetail(GetInstallationDetailType parameters)
			throws ServiceException {
		String methodName = "getInstallationDetail";
		
    	String transId = parameters.getOperationHeader().getSalesTransactionId(); 

			
		logger.enter(methodName, parameters.toString());
		
		try {
			GetInstallationDetailOperation operation  = new GetInstallationDetailOperation();
			GetInstallationDetailResponseType result  =  operation.execute(parameters);
			return result;
		} catch( Throwable t ) { 
			logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, methodName, t.getMessage());
			logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, methodName, t.getMessage());
			if(!StringUtils.isBlank(parameters.getOperationHeader().getSalesTransactionId())){
				transId = parameters.getOperationHeader().getSalesTransactionId();
			}
			GetInstallationDetailResponseType result = new GetInstallationDetailResponseType();
			List<SalesResponseMessage.MessageList> messageList = new ArrayList<SalesResponseMessage.MessageList>();
			MessageList exceptionDetails = EnterpriseWLNExceptionUtil.getExceptionDetails(transId, t,EnterpriseWLNSalesServicesErrorCodes.GET_AVAIL_INSTALL_DATE_EXCEPTION_ERROR);
			messageList.add(exceptionDetails);
			result.setMessageList(messageList);
			return result;
			/*com.telus.tmi.xmlschema.xsd.enterprise.basetypes.exceptions_v3.FaultExceptionDetailsType fedt = 
					new com.telus.tmi.xmlschema.xsd.enterprise.basetypes.exceptions_v3.FaultExceptionDetailsType();
			
			fedt.setErrorMessage(EnterpriseSalesServiceUtil.getStackTrace(t));
			throw new ServiceException(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, fedt);*/
		} finally{
			logger.exit(methodName);
		}
		
		 
	}


	public GetAvailableOfferSummaryListResponseType getAvailableOfferSummaryList(ProfilingVariance dummy,
			GetAvailableOfferSummaryListType parameters) throws ServiceException {
		String functionName = "getAvailableOfferSummaryList";
		String transId = parameters.getOperationHeader().getSalesTransactionId();
		if("1".equals(transId)){
			return GetAvailableOfferSummaryListStub.getOfferSummaryMockup();
		} else if("2".equals(transId)){
			return GetAvailableOfferSummaryListStub.getSweetnerOfferSummaryMockup();
		} else{
		logger.enter(functionName);
		try{
			//GetAvailableOfferSummaryListOperation operation = new GetAvailableOfferSummaryListOperation();
			GetAvailableOfferSummaryListOperation operation =beanFactory.getBean(GetAvailableOfferSummaryListOperation.class);
			return operation.execute(parameters);
		}catch(Exception e){
			logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR,functionName,e.getMessage(),e);
			
			if(!StringUtils.isBlank(parameters.getOperationHeader().getSalesTransactionId())){
				transId = parameters.getOperationHeader().getSalesTransactionId();
			}
			GetAvailableOfferSummaryListResponseType result = new GetAvailableOfferSummaryListResponseType();
			List<GetAvailableOfferSummaryListResponseType.MessageList> messageList = new ArrayList<GetAvailableOfferSummaryListResponseType.MessageList>();
			MessageList exceptionDetails = EnterpriseWLNExceptionUtil.getExceptionDetails(transId, e, EnterpriseWLNSalesServicesErrorCodes.GET_AVAIL_OFFER_SUMMARY_LIST_EXCEPTION_ERROR);
			messageList.add(buildMessage(exceptionDetails));
			result.setMessageList(messageList);
			return result;
		}
		}
	}


	private com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableOfferSummaryListResponseType.MessageList buildMessage(
			MessageList exceptionDetails) {
		com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableOfferSummaryListResponseType.MessageList result = new com.telus.tmi.xmlschema.srv.mso.channelsalesmgmt.enterprisesalesinformationservicerequestresponse_v5.GetAvailableOfferSummaryListResponseType.MessageList();

		result.setContextData(exceptionDetails.getContextData());
		result.setDateTimeStamp(exceptionDetails.getDateTimeStamp());
		result.setErrorCode(exceptionDetails.getErrorCode());
		result.setMessageList(exceptionDetails.getMessageList());
		result.setMessageType(exceptionDetails.getMessageType());
		result.setRelatedMessageList(exceptionDetails.getRelatedMessageList());
		result.setTransactionId(exceptionDetails.getTransactionId());
		
		return result;
	}


	public GetAvailableProductComponentResponseType getAvailableWirelineProductList(
			GetAvailableProductComponentType parameters) throws ServiceException {

		String functionName = "getAvailableWirelineProductList";
		logger.enter(functionName);
		try{
			GetAvailableWirelineProductListOperation operation = new GetAvailableWirelineProductListOperation();
			return operation.execute(parameters);
		}catch(Exception e){
			logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR,functionName,e.getMessage(),e);
			String transId = "";
			if(!StringUtils.isBlank(parameters.getOperationHeader().getSalesTransactionId())){
				transId = parameters.getOperationHeader().getSalesTransactionId();
			}
			GetAvailableProductComponentResponseType result = new GetAvailableProductComponentResponseType();
			List<GetAvailableProductComponentResponseType.MessageList> messageList = new ArrayList<GetAvailableProductComponentResponseType.MessageList>();
			MessageList exceptionDetails = EnterpriseWLNExceptionUtil.getExceptionDetails(transId, e, EnterpriseWLNSalesServicesErrorCodes.GET_AVAIL_WLS_PRODUCT_LIST_EXCEPTION_ERROR);
			GetAvailableProductComponentResponseType.MessageList operationMessageList = new GetAvailableProductComponentResponseType.MessageList();
			operationMessageList.setContextData(exceptionDetails.getContextData());
			operationMessageList.setDateTimeStamp(exceptionDetails.getDateTimeStamp());
			operationMessageList.setErrorCode(exceptionDetails.getErrorCode());
			operationMessageList.setMessageList(exceptionDetails.getMessageList());
			operationMessageList.setMessageType(exceptionDetails.getMessageType());
			operationMessageList.setTransactionId(exceptionDetails.getTransactionId());
			messageList.add(operationMessageList);
			result.setMessageList(messageList);
			return result;
		}
	}



	public GetSalesOfferDetailResponseType getSalesOfferDetail(GetSalesOfferDetailType parameters)
			throws ServiceException {
		String methodName = "getSalesOfferDetail";
    	String transId = parameters.getOperationHeader().getSalesTransactionId(); 
			
		logger.enter(methodName, parameters.toString());
		
		try {
			if ("1".equals(transId)){
				return GetSalesOfferDetailMockBuilder.getStubSalesOfferDetail();
			} else {
				//\GetSalesOfferDetailOperation operation  = new GetSalesOfferDetailOperation();
				GetSalesOfferDetailOperation operation = beanFactory.getBean(GetSalesOfferDetailOperation.class);
				return  operation.execute(parameters);
			}
		} catch( Exception exception ) { 
			logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, methodName, exception.getMessage());
			if(!StringUtils.isBlank(parameters.getOperationHeader().getSalesTransactionId())){
				transId = parameters.getOperationHeader().getSalesTransactionId();
			}
			GetSalesOfferDetailResponseType result = new GetSalesOfferDetailResponseType();
			List<GetSalesOfferDetailResponseType.MessageList> messageList = new ArrayList<GetSalesOfferDetailResponseType.MessageList>();
			MessageList exceptionDetails = EnterpriseWLNExceptionUtil.getExceptionDetails(transId, exception,EnterpriseWLNSalesServicesErrorCodes.GET_SALES_OFFER_DETAIL_EXCEPTION_ERROR);
			GetSalesOfferDetailResponseType.MessageList operationMessageList = new GetSalesOfferDetailResponseType.MessageList();
			operationMessageList.setContextData(exceptionDetails.getContextData());
			operationMessageList.setDateTimeStamp(exceptionDetails.getDateTimeStamp());
			operationMessageList.setErrorCode(exceptionDetails.getErrorCode());
			operationMessageList.setMessageList(exceptionDetails.getMessageList());
			operationMessageList.setMessageType(exceptionDetails.getMessageType());
			operationMessageList.setTransactionId(exceptionDetails.getTransactionId());
			messageList.add(operationMessageList);
			result.setMessageList(messageList);
			return result;
		} finally{
			logger.exit(methodName);
		}
	}


	public GetWirelineProductComponentListResponseType getWirelineProductComponentList(
			GetWirelineProductComponentListType parameters) throws ServiceException {
		String methodName = "getWirelineProductComponentList";
    	String transId = parameters.getOperationHeader().getSalesTransactionId(); 
			
		logger.enter(methodName, parameters.toString());
		
		try {
			if ("1".equals(transId)){
				GetWirelineProductComponentListResponseType result =  GetSalesOfferDetailMockBuilder.getStubWirelineProductComponentList();
				return result;
			} else {
				GetWirelineProductComponentListOperation operation  = new GetWirelineProductComponentListOperation();
				return  operation.execute(parameters);
			}
		} catch( Exception exception ) { 
			logger.error(EnterpriseWLNSalesServicesConstants.UNKNOWN_EWLNSS_ERROR, methodName, exception.getMessage());
			if(!StringUtils.isBlank(parameters.getOperationHeader().getSalesTransactionId())){
				transId = parameters.getOperationHeader().getSalesTransactionId();
			}
			GetWirelineProductComponentListResponseType result = new GetWirelineProductComponentListResponseType();
			List<SalesResponseMessage.MessageList> messageList = new ArrayList<SalesResponseMessage.MessageList>();
			MessageList exceptionDetails = EnterpriseWLNExceptionUtil.getExceptionDetails(transId, exception,EnterpriseWLNSalesServicesErrorCodes.GET_WLN_PRODUCT_COMPONENT_LIST_EXCEPTION_ERROR);
			messageList.add(exceptionDetails);
			result.setMessageList(messageList);
			return result;
		} finally{
			logger.exit(methodName);
		}
	}

}
